plot(aus_reg2)
image(EVI_mdb_p,add=T, col = terrain.colors(20))
plot(mdb_reg2,border="grey",lwd=4)
plot(aus_reg2,border="grey",add=T, lwd=2)
legend(150.2,-36,c("State","MDB"),col=c("grey","grey"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=2)
plot(e222,col="red",add=T,lwd=2)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
?image
View(EVI_mdb_p)
?gSimplify
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(1.5,1.5,1.5,1.5))
plot(aus_reg2,border="grey",add=T, lwd=2)
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(1.5,1.5,1.5,1.5))
plot(aus_reg2,border="grey", lwd=2)
image(EVI_mdb_p,add=T, col = terrain.colors(20))
plot(mdb_reg2,border="grey",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("grey","grey"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=2)
plot(e222,col="red",add=T,lwd=2)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
mdb_reg2@bbox
mdb_area <- extent(c(138.56855, 152.48733,-37.68208, -24.58827))
EVI_mdb <- crop(EVImap,mdb_area)
EVI_mdb_p <- projectRaster(EVI_mdb,
crs = "+proj=longlat +lat_1=-18 +lat_2=-36 +lat_0=-27 +lon_0=132 +x_0=0 +y_0=0 +ellps=WGS84")
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(1.5,1.5,1.5,1.5))
image(EVI_mdb_p, col = terrain.colors(20))
plot(aus_reg2,border="grey", lwd=2, add=T)
plot(mdb_reg2,border="grey",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("grey","grey"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=2)
plot(e222,col="red",add=T,lwd=2)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(1.5,1.5,1.5,1.5))
image(EVI_mdb_p, col = terrain.colors(20))
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=2)
plot(e222,col="red",add=T,lwd=2)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(1.5,1.5,1.5,1.5))
image(EVI_mdb_p, col = terrain.colors(20))
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=4)
plot(e222,col="red",add=T,lwd=4)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb_p, col = terrain.colors(20), cex.lab=2, cex.axis=2)
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=4)
plot(e222,col="red",add=T,lwd=4)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb_p, col = terrain.colors(20), cex.lab=2, cex.axis=2, xlab="", ylab="")
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=4)
plot(e222,col="red",add=T,lwd=4)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
unique(EVI_mdb_p@data@values)
range(EVI_mdb_p@data@values)
range(EVI_mdb_p@data@values,na.rm=T)
hist(EVI_mdb_p@data@values,na.rm=T)
View(mod_tc_r11)
hist(EVImap@data@values,na.rm=T)
str(EVImap@data)
str(EVI_mdb@data)
unique(EVI_mdb@data@values)
hist(EVI_mdb@data@values)
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb, breaks=c(0,24:35),col = terrain.colors(20), cex.lab=2, cex.axis=2, xlab="", ylab="")
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb, breaks=c(0,24:35),col = terrain.colors(21), cex.lab=2, cex.axis=2, xlab="", ylab="")
24:35
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb, breaks=c(0,24:35),col = terrain.colors(12), cex.lab=2, cex.axis=2, xlab="", ylab="")
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=4)
plot(e222,col="red",add=T,lwd=4)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
png("figures/map_selreg.png", width=960, height=960)
#windows()
par(mar=c(3,3,3,3))
image(EVI_mdb, breaks=c(0,24:35),col = rev(terrain.colors(12)), cex.lab=2, cex.axis=2, xlab="", ylab="")
plot(aus_reg2,border="black", lwd=2, add=T)
plot(mdb_reg2,border="black",lwd=4, add=T)
legend(150.2,-36,c("State","MDB"),col=c("black","black"),lwd=c(2,4),bty="n",title="Boundary",cex=1.5)
box(lty=1)
plot(e111,col="red",add=T, lwd=4)
plot(e222,col="red",add=T,lwd=4)
text(147.2,-26.8,"QLD",cex=1.5)
text(148,-34.7,"NSW/VIC",cex=1.5)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir =
"E:/DropBox/Dropbox (Sydney Uni)/Farzina_paper/Data")
require(tidyverse)
require(lubridate)
SWL_bores <- read_csv("20190506_BOMExtractlevels_summary.csv")
SWL_bores <- read_csv("20190506_BOMExtractlevels_summary.csv")
SWL_bores
tail(SWL_bores)
# read in the Muttama shape file
Muttama_sh <- shapefile("shapefiles/Muttama catchment.shp")
require(raster)
# read in the Muttama shape file
Muttama_sh <- shapefile("shapefiles/Muttama catchment.shp")
# correct projection to WGS84
crs(Muttama_sh) <- CRS("+proj=longlat +ellps=WGS84 +no_defs")
plot(Muttama_sh)
plot(Muttama_sh)
plot(SWL_bores$Longitude,SWL_bores$latitude, pch=19,size=2,colour="red", add=T)
?plot
plot(Muttama_sh)
points(SWL_bores$Longitude,SWL_bores$Latitude,
pch=19,size=2,colour="red", add=T)
plot(Muttama_sh)
points(SWL_bores$Longitude,SWL_bores$Latitude,
pch=19,colour="red")
plot(Muttama_sh)
points(SWL_bores$Longitude,SWL_bores$Latitude,
pch=19,col="red")
SWL_Mut <- crop(SWL_bores, extent(Muttama_sh))
SWL_Mut <- crop(as.data.frame(SWL_bores), extent(Muttama_sh))
SWL_Mut <- crop(raster(SWL_bores), extent(Muttama_sh))
?raster
SWL_Mut <- crop(raster(as.matrix(SWL_bores)), extent(Muttama_sh))
require(spData)
SWL_Mut <- SWL_bores[Muttama_sh, drop=F]
SWL_Mut <- SWL_bores[raster(Muttama_sh), drop=F]
raster(Muttama_sh)
st_intersect(SWL_bores,Muttama_sh)
library(spData)
library(sf)
install.packages("sf")
install.packages("sf")
library(sf)
st_intersect(SWL_bores,Muttama_sh)
??st_intersect
require(sf)
sf::st_intersect(SWL_bores,Muttama_sh)
sf::st_intersection(SWL_bores,Muttama_sh)
st_intersects(SWL_bores,Muttama_sh)
ncol(SWL_bores)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir =
"E:/DropBox/Dropbox (Sydney Uni)/Farzina_paper/Data")
SWL_bores1 <- SpatialPointsDataFrame(cbind(SWL_bores$Longitude,
SWL_bores$Latitude),
SWL_bores[,1:18],
proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
SWL_bores1 <- SpatialPointsDataFrame(cbind(SWL_bores$Longitude,
SWL_bores$Latitude),
as.data.frame(SWL_bores[,1:18]),
proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
SWL_Mut <- SWL_bores1[Muttama_sh, drop=F]
SWL_Mut <- mask(SWL_Mut, Muttama_sh)
SWL_Mut <- st_intersection(SWL_bores1, Muttama_sh)
SWL_Mut <- st_intersects(SWL_bores1, Muttama_sh)
SWL_Mut <- SWL_bores1[Muttama_sh, drop=F]
#SWL_Mut <- mask(SWL_Mut, Muttama_sh)
str(SWL_Mut)
nrow(SWL_bores)
plot(Muttama_sh)
points(SWL_Mut@coords$coords.x1,SWL_bores@coords$coords.x2,
pch=19,col="red")
plot(Muttama_sh)
points(SWL_Mut@coords[,1],SWL_bores@coords[,2],
pch=19,col="red")
SWL_bores@coords
plot(Muttama_sh)
points(SWL_Mut@coords[,1],SWL_Mut@coords[,2],
pch=19,col="red")
ExistData <- read_csv("All_bore_with_SWL_in_Muttama.csv")
require(tidyverse)
plot(Muttama_sh)
points(SWL_Mut@coords[,1],SWL_Mut@coords[,2],
pch=19,col="red")
points(ExistData1@coords[,1],ExistData1@coords[,2],
pch=19,col="blue")
ExistData <- read_csv("All_bore_with_SWL_in_Muttama.csv")
ExistData1 <- SpatialPointsDataFrame(cbind(ExistData$Longitude,
ExistData$Latitude),
as.data.frame(ExistData[,1:4]),
proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
plot(Muttama_sh)
points(SWL_Mut@coords[,1],SWL_Mut@coords[,2],
pch=19,col="red")
points(ExistData1@coords[,1],ExistData1@coords[,2],
pch=19,col="blue")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir =
"E:/DropBox/Dropbox (Sydney Uni)/SOIL2005/Data")
# tidyverse and lubridate are useful
require(tidyverse)
require(lubridate)
# for this markdown document I don't need to set the working dir
#setwd("e:/dropbox/Dropbox (Sydney Uni)/soil2005/data")
Menangle <- read_csv("data_Nepean_Menangle.csv")
Camden <- read_csv("data_Nepean_Camden.csv")
Menangle <- Menangle %>%
# group by day
group_by(Date = dmy_hm(Dateandtime)) %>%
# calculate the mean flow
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
# remove remaining NA values
na.omit()
summary(Menangle)
Camden <- Camden %>%
group_by(Date = dmy_hm(Dateandtime)) %>%
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
na.omit()
Menangle <- Menangle %>%
# group by day
group_by(Date = dmy_hms(Dateandtime)) %>%
# calculate the mean flow
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
# remove remaining NA values
na.omit()
# tidyverse and lubridate are useful
require(tidyverse)
require(lubridate)
# for this markdown document I don't need to set the working dir
#setwd("e:/dropbox/Dropbox (Sydney Uni)/soil2005/data")
Menangle <- read_csv("data_Nepean_Menangle.csv")
Camden <- read_csv("data_Nepean_Camden.csv")
Menangle <- Menangle %>%
# group by day
group_by(Date = dmy_hms(Dateandtime)) %>%
# calculate the mean flow
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
# remove remaining NA values
na.omit()
summary(Menangle)
Camden <- Camden %>%
group_by(Date = dmy_hms(Dateandtime)) %>%
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
na.omit()
# tidyverse and lubridate are useful
require(tidyverse)
require(lubridate)
# for this markdown document I don't need to set the working dir
#setwd("e:/dropbox/Dropbox (Sydney Uni)/soil2005/data")
Menangle <- read_csv("data_Nepean_Menangle.csv")
Camden <- read_csv("data_Nepean_Camden.csv")
Menangle <- Menangle %>%
# group by day
group_by(Date = dmy_hms(Dateandtime)) %>%
# calculate the mean flow
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
# remove remaining NA values
na.omit()
summary(Menangle)
Camden <- Camden %>%
group_by(Date = ymd_hms(Dateandtime)) %>%
summarise(Flow = mean(FLOW_RATE, na.rm=T)) %>%
na.omit()
summary(Menangle)
# length of the data
n <- nrow(Menangle)
n1 <- nrow(Camden)
# sort the data from high to low
MenQ_sort <- sort(Menangle$Flow,
decreasing = TRUE, na.last=TRUE)
CamQ_sort <- sort(Camden$Flow,
decreasing = TRUE, na.last=TRUE)
# find the rank (see lecture slides)
rank_Men <- 1:n
rank_Cam <- 1:n1
# calculate the probability
Prob_Men <- rank_Men/(n+1)
Prob_Cam <- rank_Cam/(n1+1)
Men_df <- data.frame(Prob=Prob_Men*100, Flow=MenQ_sort,
Station="Menangle")
Cam_df <- data.frame(Prob=Prob_Cam*100, Flow=CamQ_sort,
Station="Camden")
# combine
plot_df <- rbind(Men_df,Cam_df)
# now make a plot
plot_df %>%
ggplot(aes(Prob,Flow,colour=Station)) +
geom_line() + scale_y_log10()
Q10_M <- quantile(Menangle$Flow,0.9, na.rm=T)
Q50_M <- quantile(Menangle$Flow,0.5, na.rm=T)
Q90_M <- quantile(Menangle$Flow,0.1, na.rm=T)
Q10_M
Q50_M
Q90_M
Q10_C <- quantile(Camden$Flow,0.9, na.rm=T)
Q50_C <- quantile(Camden$Flow,0.5, na.rm=T)
Q90_C <- quantile(Camden$Flow,0.1, na.rm=T)
Q10_C
Q50_C
Q90_C
Men_prob <- Men_df$Prob[Men_df$Flow  >= 47542] # complete this statement
# The first row is the probability
Men_prob[1]
range(Men_df$Flow)
# do the same for Camden
Cam_prob <- Cam_df$Prob[Cam_df$Flow  >= 64522] # complete this statement
# The first row is the probability
Cam_prob[1]
require(randomForest)
install.packages("rtweet")
library(tidyverse)
library(lubridate)
yourSecretKeyHere
# whatever name you assigned to your created app
appname <- "OLE_R_mod4"
## api key (example below is not a real key)
key <- "HzKh6kKownUjl2DrBiMNMoKIi"
## api secret (example below is not a real key)
secret <- "2L9NFour71ffpn9Puxs8tkeRKyEZuO2TQPjaJHRQeOuqeKVkgJ"
# create token named "twitter_token"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
# load twitter library - the rtweet library is recommended now over twitteR
library(rtweet)
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
## api key (example below is not a real key)
key <- "d6WKHoetvt41ut5ImHau4dsK5"
## api secret (example below is not a real key)
secret <- "UDZGEYGftbqlqUECO2Lr1ZV1bjNbV9zv09r4ZJwAmah9I6Frry"
# create token named "twitter_token"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
# create token named "twitter_token"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
?search_tweets
rt <- lookup_users("realdonaldtrump")
## preview tweets data
rt
tmls <- get_timelines("realdonaldtrump", n = 5000)
?tweets_data
test <- tweets_data(rt)
test
, n = 5000
tmls <- get_timelines("realdonaldtrump")
?get_timeline
tup_twitter_oauth("d6WKHoetvt41ut5ImHau4dsK5","UDZGEYGftbqlqUECO2Lr1ZV1bjNbV9zv09r4ZJwAmah9I6Frry","927918563381469185-12Zo5pUMiIt9p8OWMhICBkJeQEi5zl8","OtD1TjOyJm4GUm6laFBsycBQlPprYpK87pmDDd8yUx8ME"
)
require(twitteR)
tup_twitter_oauth("d6WKHoetvt41ut5ImHau4dsK5","UDZGEYGftbqlqUECO2Lr1ZV1bjNbV9zv09r4ZJwAmah9I6Frry","927918563381469185-12Zo5pUMiIt9p8OWMhICBkJeQEi5zl8","OtD1TjOyJm4GUm6laFBsycBQlPprYpK87pmDDd8yUx8ME")
setup_twitter_oauth("d6WKHoetvt41ut5ImHau4dsK5","UDZGEYGftbqlqUECO2Lr1ZV1bjNbV9zv09r4ZJwAmah9I6Frry","927918563381469185-12Zo5pUMiIt9p8OWMhICBkJeQEi5zl8","OtD1TjOyJm4GUm6laFBsycBQlPprYpK87pmDDd8yUx8ME")
dt_tweets<-userTimeline('realdonaltrump' n= 5000)
dt_tweets<-userTimeline('realdonaltrump', n= 5000)
setup_twitter_oauth("d6WKHoetvt41ut5ImHau4dsK5","UDZGEYGftbqlqUECO2Lr1ZV1bjNbV9zv09r4ZJwAmah9I6Frry","927918563381469185-12Zo5pUMiIt9p8OWMhICBkJeQEi5zl8","OtD1TjOyJm4GUm6laFBsycBQlPprYpK87pmDDd8yUx8ME")
dt_tweets<-userTimeline('realdonaltrump', n= 5000)
installed.packages()
installed.packages("tidyverse")
?installed.packages
installed.packages(.Library)
require(tidyverse)
# root dir
knitr::opts_knit$set(root.dir = "C:/Users/rver4657/owncloud/IntroToR")
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(lubridate)
Rainfall <- data_frame(City = c("Montevideo","New York",
"Amsterdam","Sydney",
"Moscow", "Hong Kong"),
Rain_mm = c(950, 1174, 838, 1215,
707, 2400))
Rainfall
colnames(Rainfall)
names(Rainfall)
# call a column
Rainfall$City
# or
Rainfall["City"]
# or
Rainfall[,1]
# find a row
Rainfall[Rainfall["City"]=="Montevideo"]
# see the first two rows
Rainfall[1:2,]
Rainfall %>%
filter(City=="Montevideo")
# find a subset
lots <- Rainfall %>%
filter(Rain_mm > 1000)
lots
# call a column
Rainfall %>%
select(City)
?arrange
# I can add a column of countries
Rainfall_new <- Rainfall %>%
mutate(country = c("UY", "US", "NL", "AU", "RU","CN")) %>%
# and maybe a rainfall of the average monthly rainfall
mutate(M_rain = Rain_mm/12)
# You can use select to reorder the columns and put country to the front
Rainfall_new <- Rainfall_new %>%
select(country, everything())
# And if you would like to drop the M_rain column you can use
Rainfall_new %>%
select(-M_Rain)
# I can add a column of countries
Rainfall_new <- Rainfall %>%
mutate(country = c("UY", "US", "NL", "AU", "RU","CN")) %>%
# and maybe a rainfall of the average monthly rainfall
mutate(M_rain = Rain_mm/12)
# You can use select to reorder the columns and put country to the front
Rainfall_new <- Rainfall_new %>%
select(country, everything())
# And if you would like to drop the M_rain column you can use
Rainfall_new %>%
select(-M_rain)
Rainfall_new %>%
arrange(Rain_mm, desc())
Rainfall_new %>%
arrange(desc(Rain_mm))
UR_flow <- read_csv("Data/UruguayRiver_ConcordiaSt.csv")
# root dir
knitr::opts_knit$set(root.dir = "C:/Users/rver4657/owncloud/IntroToR")
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(lubridate)
UR_flow <- read_csv("Data/UruguayRiver_ConcordiaSt.csv")
setwd("E:/Cloudstor/IntroToR")
UR_flow <- read_csv("Data/UruguayRiver_ConcordiaSt.csv")
UR_flow <- read_csv("../Data/UruguayRiver_ConcordiaSt.csv")
# check the first few lines (6 by default)
UR_flow
# aggregate to annual flow
(annual_flow <- UR_flow %>% #then
group_by(Year=Year) %>% #then
summarize(Sumflow = sum(Flow)))
# Mean monthly flow
UR_flow %>% #then
summarize(Meanflow = Mean(Flow),
SdFlow = sd(Flow))
# Mean monthly flow
UR_flow %>% #then
summarize(Meanflow = mean(Flow),
SdFlow = sd(Flow))
# root dir
knitr::opts_knit$set(root.dir = "C:/Users/rver4657/owncloud/IntroToR")
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(lubridate)
# root dir
knitr::opts_knit$set(root.dir = "E:/cloudstor/IntroToR")
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(lubridate)
knitr::opts_knit$set(root.dir = "c:/users/rver4657/Desktop") ## windows users
knitr::opts_knit$set(root.dir = "~/Desktop") ## Mac users
dir() # this gives you a list of the files in your current working directory
